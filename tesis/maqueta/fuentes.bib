
@book{Abelson2002Structure,
  title = {Structure and Interpretation of Computer Programs},
  author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
  date = {2002},
  series = {Electrical Engineering and Computer Science Series},
  edition = {2. ed., 7. [pr.]},
  publisher = {{MIT Press [u.a.]}},
  location = {{Cambridge, Mass.}},
  isbn = {978-0-262-51087-5 978-0-262-01153-2 978-0-07-000484-9},
  langid = {english},
  pagetotal = {657}
}

@article{Dijkstra1972humble,
  title = {The Humble Programmer},
  author = {Dijkstra, Edsger W.},
  date = {1972-10-01},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {15},
  number = {10},
  pages = {859--866},
  issn = {0001-0782},
  doi = {10.1145/355604.361591},
  annotation = {https://www.cs.utexas.edu/\textasciitilde EWD/transcriptions/EWD03xx/EWD340.html},
  file = {/home/xavigo/Zotero/storage/2TQSGHAW/dijkstra_1972_the_humble_programmer.pdf}
}

@inproceedings{Elliott1997Functional,
  title = {Functional Reactive Animation},
  booktitle = {Proceedings of the Second {{ACM SIGPLAN}} International Conference on {{Functional}} Programming  - {{ICFP}} '97},
  author = {Elliott, Conal and Hudak, Paul},
  date = {1997},
  pages = {263--273},
  publisher = {{ACM Press}},
  location = {{Amsterdam, The Netherlands}},
  doi = {10.1145/258948.258973},
  eventtitle = {The Second {{ACM SIGPLAN}} International Conference},
  isbn = {978-0-89791-918-0},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/6RG7QTYS/Elliott and Hudak - 1997 - Functional reactive animation.pdf}
}

@inproceedings{Elliott2009Pushpull,
  title = {Push-Pull Functional Reactive Programming},
  booktitle = {Proceedings of the 2nd {{ACM SIGPLAN}} Symposium on {{Haskell}}},
  author = {Elliott, Conal M.},
  date = {2009-09-03},
  series = {Haskell '09},
  pages = {25--36},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1596638.1596643},
  abstract = {Functional reactive programming (FRP) has simple and powerful semantics, but has resisted efficient implementation. In particular, most past implementations have used demand-driven sampling, which accommodates FRP's continuous time semantics and fits well with the nature of functional programming. Consequently, values are wastefully recomputed even when inputs don't change, and reaction latency can be as high as the sampling period. This paper presents a way to implement FRP that combines data- and demand-driven evaluation, in which values are recomputed only when necessary, and reactions are nearly instantaneous. The implementation is rooted in a new simple formulation of FRP and its semantics and so is easy to understand and reason about. On the road to a new implementation, we'll meet some old friends (monoids, functors, applicative functors, monads, morphisms, and improving values) and make some new friends (functional future values, reactive normal form, and concurrent "unambiguous choice").},
  isbn = {978-1-60558-508-6},
  keywords = {concurrency,data-driven,demand-driven,functional reactive programming,semantics},
  file = {/home/xavigo/Zotero/storage/W3YGP3DF/Elliott - 2009 - Push-pull functional reactive programming.pdf}
}

@article{Hudak1989Conception,
  title = {Conception, Evolution, and Application of Functional Programming Languages},
  author = {Hudak, Paul},
  date = {1989-09},
  journaltitle = {ACM Computing Surveys},
  shortjournal = {ACM Comput. Surv.},
  volume = {21},
  number = {3},
  pages = {359--411},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/72551.72554},
  abstract = {The foundations of functional programming languages are examined from both historical and technical perspectives. Their evolution is traced through several critical periods: early work on lambda calculus and combinatory calculus, Lisp, Iswim, FP, ML, and modern functional languages such as Miranda               1               and Haskell. The fundamental premises on which the functional programming methodology stands are critically analyzed with respect to philosophical, theoretical, and pragmatic concerns. Particular attention is paid to the main features that characterize modern functional languages: higher-order functions, lazy evaluation, equations and pattern matching, strong static typing and type inference, and data abstraction. In addition, current research areas—such as parallelism, nondeterminism, input/output, and state-oriented computations—are examined with the goal of predicting the future development and application of functional languages.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/HY6UGH33/Hudak - 1989 - Conception, evolution, and application of function.pdf}
}

@inproceedings{Hudak2007history,
  title = {A History of {{Haskell}}: Being Lazy with Class},
  shorttitle = {A History of {{Haskell}}},
  booktitle = {Proceedings of the Third {{ACM SIGPLAN}} Conference on {{History}} of Programming Languages},
  author = {Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
  date = {2007-06-09},
  series = {{{HOPL III}}},
  pages = {12-1--12-55},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1238844.1238856},
  abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
  isbn = {978-1-59593-766-7},
  file = {/home/xavigo/Zotero/storage/HEGGXBPT/Hudak et al. - 2007 - A history of Haskell being lazy with class.pdf}
}

@book{Hudak2018Haskell,
  title = {The {{Haskell School}} of {{Music}}: {{From Signals}} to {{Symphonies}}},
  shorttitle = {The {{Haskell School}} of {{Music}}},
  author = {Hudak, Paul and Quick, Donya},
  date = {2018-09-30},
  edition = {1},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/9781108241861},
  isbn = {978-1-108-24186-1 978-1-108-41675-7},
  file = {/home/xavigo/Zotero/storage/W5RLJI74/hudak_quick_2018_the_haskell_school_of_music.pdf}
}

@article{Hughes1989Why,
  title = {Why {{Functional Programming Matters}}},
  author = {Hughes, John},
  date = {1989-02-01},
  journaltitle = {The Computer Journal},
  shortjournal = {The Computer Journal},
  volume = {32},
  number = {2},
  pages = {98--107},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/32.2.98},
  abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write and to debug, and provides a collection of modules that can be reused to reduce future programming costs. In this paper we show that two features of functional languages in particular, higher-order functions and lazy evaluation, can contribute significantly to modularity. As examples, we manipulate lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artificial Intelligence used in game-playing programs). We conclude that since modularity is the key to successful programming, functional programming offers important advantages for software development.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/DJKEVUCR/Hughes - 1989 - Why Functional Programming Matters.pdf}
}

@article{Jones2002Tackling,
  title = {Tackling the {{Awkward Squad}}: Monadic Input/Output, Concurrency, Exceptions, and Foreign-Language Calls in {{Haskell}}},
  author = {Jones, Simon PEYTON},
  date = {2002-07-25},
  abstract = {Functional programming may be beautiful, but to write real applications we must grapple with awkward real-world issues: input/output, robustness, concurrency, and interfacing to programs written in other languages.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/TQJJXX7V/Jones - Tackling the Awkward Squad monadic inputoutput, .pdf}
}

@inproceedings{McLean2020Algorithmic,
  title = {Algorithmic {{Pattern}}},
  booktitle = {Proceedings of the {{International Conference}} on {{New Interfaces}} for {{Musical Expression}}},
  author = {McLean, Alex},
  date = {2020-07},
  pages = {6},
  url = {https://www.nime.org/proceedings/2020/nime2020_paper50.pdf},
  abstract = {This paper brings together two main perspectives on algorithmic pattern. First, the writing of musical patterns in live coding performance, and second, the weaving of patterns in textiles. In both cases, algorithmic pattern is an interface between the human and the outcome, where small changes have far-reaching impact on the results.},
  eventtitle = {{{NIME}}},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/YGMAJNTK/Proceedings of the International Conference on New.pdf}
}

@incollection{Milne2015Perfect,
  title = {Perfect Balance: {{A}} Novel Principle for the Construction of Musical Scales and Meters},
  shorttitle = {Perfect Balance},
  booktitle = {Mathematics and Computation in Music: 5th International Conference, {{MCM}} 2015; Proceedings},
  author = {Milne, Andrew and Bulger, David and Herff, Steffen and Sethares, William},
  date = {2015-06-01},
  series = {Lecture Notes in Computer Science},
  number = {9110},
  pages = {97--108},
  location = {{London, UK}},
  doi = {10.1007/978-3-319-20603-5},
  abstract = {We identify a class of periodic patterns in musical scales or meters that are perfectly balanced. Such patterns have elements that are distributed around the periodic circle such that their 'centre of gravity' is precisely at the circle's centre. Perfect balance is implied by the well established concept of perfect evenness (e.g., equal step scales or isochronous meters). However, we identify a less trivial class of perfectly balanced patterns that have no repetitions within the period. Such patterns can be distinctly uneven. We explore some heuristics for generating and parameterizing these patterns. We also introduce a theorem that any perfectly balanced pattern in a discrete universe can be expressed as a combination of regular polygons. We hope this framework may be useful for understanding our perception and production of aesthetically interesting and novel (microtonal) scales and meters, and help to dis-ambiguate between balance and evenness; two properties that are easily confused.},
  isbn = {978-3-319-20602-8},
  file = {/home/xavigo/Zotero/storage/QMI2JU3C/Milne et al. - 2015 - Perfect balance A novel principle for the constru.pdf}
}

@article{Milne2016XronoMorph,
  title = {{{XronoMorph}}: {{Algorithmic Generation}} of {{Perfectly Balanced}} and {{Well-Formed Rhythms}}},
  author = {Milne, Andrew J and Herff, Steffen A and Bulger, David and Sethares, William A and Dean, Roger T},
  date = {2016-07},
  journaltitle = {Proceedings of the International Conference on New Interfaces for Musical Expression},
  pages = {6},
  doi = {10.5281/zenodo.1176082},
  abstract = {We present an application—XronoMorph—for the algorithmic generation of rhythms in the context of creative composition and performance, and of musical analysis and education. XronoMorph makes use of visual and geometrical conceptualizations of rhythms, and allows the user to smoothly morph between rhythms. Sonification of the user generated geometrical constructs is possible using a built-in sampler, VST and AU plugins, or standalone synthesizers via MIDI. The algorithms are based on two underlying mathematical principles: perfect balance and well-formedness, both of which can be derived from coefficients of the discrete Fourier transform of the rhythm. The mathematical background, musical implications, and their implementation in the software are discussed.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/SHZH5IEC/Milne et al. - XronoMorph Algorithmic Generation of Perfectly Ba.pdf}
}

@book{OlivaresSoria2022Principios,
  title = {Principios de Creación Sonora Procedural},
  author = {Olivares Soria, Edmar},
  date = {2022},
  edition = {1},
  publisher = {{Centro Mexicano para la Música y las Artes Sonoras}},
  location = {{Morelia, Michoacan}},
  url = {https://www.cmmas.org/es/posts/Libro-Principios-de-creacion-sonora-procedural-},
  isbn = {978-607-99502-1-7},
  file = {/home/xavigo/Zotero/storage/V88WVGGA/Olivares Soria - 2022 - Principios de creación sonora procedural.pdf}
}

@inproceedings{Spiegel1981Manipulations,
  title = {Manipulations of {{Musical Patterns}}},
  booktitle = {Proceedings of the {{Symposium}} on {{Small Computers}} and the {{Arts}}},
  author = {Spiegel, Laurie},
  date = {1981},
  pages = {19--22},
  url = {http://lauriespiegel.net/ls/writings/musical_manip.html},
  keywords = {morphology,pattern},
  file = {/home/xavigo/Zotero/storage/FXXPBA3W/musical_manip.html}
}

@article{Toussaint2005Euclidean,
  title = {The {{Euclidean Algorithm Generates Traditional Musical Rhythms}}},
  author = {Toussaint, Godfried},
  date = {2005},
  journaltitle = {Proceedings of BRIDGES: Mathematical Connections in Art, Music and Science},
  pages = {47--56},
  abstract = {The Euclidean algorithm (which comes down to us from Euclid’s Elements) computes the greatest common divisor of two given integers. It is shown here that the structure of the Euclidean algorithm may be used to generate, very efficiently, a large family of rhythms used as timelines (ostinatos), in sub-Saharan African music in particular, and world music in general. These rhythms, here dubbed Euclidean rhythms, have the property that their onset patterns are distributed as evenly as possible. Euclidean rhythms also find application in nuclear physics accelerators and in computer science, and are closely related to several families of words and sequences of interest in the study of the combinatorics of words, such as Euclidean strings, to which the Euclidean rhythms are compared.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/AAJJ3G3T/Toussaint - 2005 - The Euclidean Algorithm Generates Traditional Musi.pdf}
}

@book{Toussaint2020geometry,
  title = {The Geometry of Musical Rhythm: What Makes a "Good" Rhythm Good?},
  shorttitle = {The Geometry of Musical Rhythm},
  author = {Toussaint, Godfried T},
  date = {2020},
  url = {https://www.taylorfrancis.com/books/9781351247771},
  urldate = {2021-02-06},
  abstract = {The original edition of The Geometry of Musical Rhythm was the first book to provide a systematic and accessible computational geometric analysis of the musical rhythms of the world. It explained how the study of the mathematical properties of musical rhythm generates common mathematical problems that arise in a variety of seemingly disparate fields. The book also introduced the distance approach to phylogenetic analysis and illustrated its application to the study of musical rhythm. The new edition retains all of this, while also adding 100 pages, 93 figures, 225 new references, and six new chapters covering topics such as meter and metric complexity, rhythmic grouping, expressive timbre and timing in rhythmic performance, and evolution phylogenetic analysis of ancient Greek paeonic rhythms. In addition, further context is provided to give the reader a fuller and richer insight into the historical connections between music and mathematics.},
  isbn = {978-1-351-24777-1},
  langid = {english},
  annotation = {OCLC: 1139843477},
  file = {/home/xavigo/Zotero/storage/MZZDIRLE/Toussaint - 2020 - The geometry of musical rhythm what makes a good.pdf}
}


