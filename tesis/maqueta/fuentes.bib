@book{Abelson2002Structure,
  title = {Structure and Interpretation of Computer Programs},
  author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
  date = {2002},
  series = {Electrical Engineering and Computer Science Series},
  edition = {2. ed., 7. [pr.]},
  publisher = {{MIT Press [u.a.]}},
  location = {{Cambridge, Mass.}},
  isbn = {978-0-262-51087-5 978-0-262-01153-2 978-0-07-000484-9},
  langid = {english},
  pagetotal = {657}
}

@book{Blackwell2022Live,
  title = {Live Coding: A User's Manual},
  shorttitle = {Live Coding Book},
  author = {Blackwell, Alan F. and Cocker, Emma and Cox, Geoff and McLean, Alex and Magnusson, Thor},
  date = {2022},
  series = {Software Studies},
  publisher = {{The MIT Press}},
  location = {{Cambridge, Massachusetts}},
  url = {https://livecodingbook.toplap.org/},
  abstract = {"A multi-authored comprehensive introduction to live coding's potential open up deeper questions about contemporary cultural production and computational culture"--},
  isbn = {978-0-262-54481-8},
  pagetotal = {329},
  keywords = {Agile software development,Algorithms,Computer programming,{Creation (Literary, artistic, etc.)},Philosophy,Psychological aspects}
}

@article{Dijkstra1972humble,
  title = {The Humble Programmer},
  author = {Dijkstra, Edsger W.},
  date = {1972-10-01},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {15},
  number = {10},
  pages = {859--866},
  issn = {0001-0782},
  doi = {10.1145/355604.361591},
  annotation = {https://www.cs.utexas.edu/\textasciitilde EWD/transcriptions/EWD03xx/EWD340.html},
  file = {/home/xavigo/Zotero/storage/2TQSGHAW/dijkstra_1972_the_humble_programmer.pdf}
}

@inproceedings{Elliott1997Functional,
  title = {Functional Reactive Animation},
  booktitle = {Proceedings of the Second {{ACM SIGPLAN}} International Conference on {{Functional}} Programming  - {{ICFP}} '97},
  author = {Elliott, Conal and Hudak, Paul},
  date = {1997},
  pages = {263--273},
  publisher = {{ACM Press}},
  location = {{Amsterdam, The Netherlands}},
  doi = {10.1145/258948.258973},
  eventtitle = {The Second {{ACM SIGPLAN}} International Conference},
  isbn = {978-0-89791-918-0},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/6RG7QTYS/Elliott and Hudak - 1997 - Functional reactive animation.pdf}
}

@inproceedings{Elliott2009Pushpull,
  title = {Push-Pull Functional Reactive Programming},
  booktitle = {Proceedings of the 2nd {{ACM SIGPLAN}} Symposium on {{Haskell}}},
  author = {Elliott, Conal},
  date = {2009-09-03},
  series = {Haskell '09},
  pages = {25--36},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1596638.1596643},
  abstract = {Functional reactive programming (FRP) has simple and powerful semantics, but has resisted efficient implementation. In particular, most past implementations have used demand-driven sampling, which accommodates FRP's continuous time semantics and fits well with the nature of functional programming. Consequently, values are wastefully recomputed even when inputs don't change, and reaction latency can be as high as the sampling period. This paper presents a way to implement FRP that combines data- and demand-driven evaluation, in which values are recomputed only when necessary, and reactions are nearly instantaneous. The implementation is rooted in a new simple formulation of FRP and its semantics and so is easy to understand and reason about. On the road to a new implementation, we'll meet some old friends (monoids, functors, applicative functors, monads, morphisms, and improving values) and make some new friends (functional future values, reactive normal form, and concurrent "unambiguous choice").},
  isbn = {978-1-60558-508-6},
  keywords = {concurrency,data-driven,demand-driven,frp,functional reactive programming,semantics},
  file = {/home/xavigo/Zotero/storage/W3YGP3DF/Elliott - 2009 - Push-pull functional reactive programming.pdf}
}

@video{Elliott2015Essence,
  entrysubtype = {video},
  title = {The {{Essence}} and {{Origins}} of {{Functional Reactive Programming}}},
  editor = {Elliott, Conal},
  editortype = {director},
  editora = {{YOW! Lambda Jam}},
  editoratype = {collaborator},
  date = {2015-10-17},
  publisher = {{GOTO Conferences}},
  url = {https://youtu.be/rfmkzp76M4M?si=VRyU4t_vDbPKT2Y0},
  urldate = {2022-06-29},
  abstract = {Functional Reactive Programming (FRP) is now 20 years old. Although originally motivated by interactive 3D computer graphics, FRP is a general paradigm for describing dynamic (time-varying) information. Such information had traditionally been described in software only indirectly, as successive side effects of sequential execution. In contrast, FRP expressions describe entire evolutions of values over time, representing these evolutions directly as first-class values. From the start, FRP has been based on two simple and fundamental principles, namely (a) having a precise and simple denotation and (b) continuous time. The first property, which Peter Landin called “denotative” (and “genuinely functional”), applies across problem domains and ensures a precise, implementation-independent specification, insulated from operational details as found in efficient implementations. As such, denotative systems can be reasoned about practically and rigorously. The second property (temporal continuity) is domain-specific and is crucial for simple composability, natural specification of behavior via integration and differentiation, and adaptively efficient implementations. Over the last few years, something about FRP has generated a lot of interest among programmers, inspiring several so-called “FRP” systems implemented in various programming languages. Most of these systems, however, lack both of FRP’s fundamental properties. Missing a denotation, they’re defined only in vague and/or operational terms (e.g. “graphs” and “update propagation”). Missing continuous time, they fail to provide temporal modularity (sampling-independence and natural temporal transformability), committing prematurely to sampling rates that may turn out to be too low for accuracy or too high for efficiency. (Discrete notions of imagery have these same drawbacks, remedied by vector graphics and other continuous models.) For the same reason, these systems cannot express behaviors as integrals or derivatives and must instead express explicit approximations, leading to cluttered code with poor quality and/or performance. In this talk, I’ll share with you the essence of the original (denotative and continuous) FRP. You’ll see the thought processes that led to its design, including the care I took to keep the specification both precise and simple, and hopefully, you’ll get a sense of why you might care. As a more in-depth follow-up, the “Denotational Design” workshop explores how to use denotations to design libraries in general. Conal Elliott has been working (and playing) in functional programming for more than 30 years. He especially enjoys applying semantic elegance and rigor to library design and optimized implementation. He invented the paradigm now known as “functional reactive programming” in the early 1990s, and then pioneered compilation techniques for high-performance, high-level embedded domain-specific languages, with applications including 2D and 3D computer graphics. The latter work included the first compilation of Haskell programs to GPU code, while maintaining precise and simple semantics and powerful composability, as well a high degree of optimization. Conal earned a BA in math with honors from the College of Creative Studies at UC Santa Barbara in 1982 and a PhD in Computer Science from Carnegie Mellon University in 1990. His latest position was at Tabula Inc, where he worked on chip specification and compiling Haskell to hardware for massively parallel execution until their closure in early 2015. Before Tabula, his positions included Architect at Sun Microsystems and Researcher in the Microsoft Research graphics group. He has also coached couples and led conscious relationship workshops together with his partner Holly Croydon, with whom he now lives on 20 acres in the woods in the California Gold Country. For more on Lambda Jam, visit http://www.lambdajam.com},
  langid = {english},
  keywords = {frp}
}

@inproceedings{Felleisen1990expressive,
  title = {On the Expressive Power of Programming Languages},
  booktitle = {{{ESOP}} '90},
  author = {Felleisen, Matthias},
  editor = {Jones, Neil},
  date = {1990},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {134--151},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-52592-0_60},
  abstract = {The literature on programming languages contains an abundance of informal claims on the relative expressive power of programming languages, but there is no framework for formalizing such statements nor for deriving interesting consequences. As a first step in this direction, we develop a formal notion of expressiveness and investigate its properties. To demonstrate the theory's closeness to published intuitions on expressiveness, we analyze the expressive power of several extensions of functional languages. Based on these results, we believe that our system correctly captures many of the informal ideas on expressiveness, and that it constitutes a good basis for further research in this direction.},
  isbn = {978-3-540-47045-8},
  langid = {english},
  keywords = {Expressive Power,Formal Framework,Operational Semantic,Programming Language,Pure Scheme},
  file = {/home/xavigo/Zotero/storage/JN65IUCA/Felleisen - 1990 - On the expressive power of programming languages.pdf}
}

@article{Hudak1989Conception,
  title = {Conception, Evolution, and Application of Functional Programming Languages},
  author = {Hudak, Paul},
  date = {1989-09},
  journaltitle = {ACM Computing Surveys},
  shortjournal = {ACM Comput. Surv.},
  volume = {21},
  number = {3},
  pages = {359--411},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/72551.72554},
  abstract = {The foundations of functional programming languages are examined from both historical and technical perspectives. Their evolution is traced through several critical periods: early work on lambda calculus and combinatory calculus, Lisp, Iswim, FP, ML, and modern functional languages such as Miranda               1               and Haskell. The fundamental premises on which the functional programming methodology stands are critically analyzed with respect to philosophical, theoretical, and pragmatic concerns. Particular attention is paid to the main features that characterize modern functional languages: higher-order functions, lazy evaluation, equations and pattern matching, strong static typing and type inference, and data abstraction. In addition, current research areas—such as parallelism, nondeterminism, input/output, and state-oriented computations—are examined with the goal of predicting the future development and application of functional languages.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/HY6UGH33/Hudak - 1989 - Conception, evolution, and application of function.pdf}
}

@book{Hudak2000Haskell,
  title = {The {{Haskell School}} of {{Expression}}: {{Learning Functional Programming Through Multimedia}}},
  shorttitle = {The {{Haskell School}} of {{Expression}}},
  author = {Hudak, Paul},
  date = {2000-02-28},
  edition = {1},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/CBO9780511818073},
  isbn = {978-0-521-64338-2 978-0-511-81807-3 978-0-521-64408-2}
}

@inproceedings{Hudak2007history,
  title = {A History of {{Haskell}}: Being Lazy with Class},
  shorttitle = {A History of {{Haskell}}},
  booktitle = {Proceedings of the Third {{ACM SIGPLAN}} Conference on {{History}} of Programming Languages},
  author = {Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
  date = {2007-06-09},
  series = {{{HOPL III}}},
  pages = {12-1--12-55},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1238844.1238856},
  abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
  isbn = {978-1-59593-766-7},
  file = {/home/xavigo/Zotero/storage/HEGGXBPT/Hudak et al. - 2007 - A history of Haskell being lazy with class.pdf}
}

@book{Hudak2018Haskell,
  title = {The {{Haskell School}} of {{Music}}: {{From Signals}} to {{Symphonies}}},
  shorttitle = {The {{Haskell School}} of {{Music}}},
  author = {Hudak, Paul and Quick, Donya},
  date = {2018-09-30},
  edition = {1},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/9781108241861},
  isbn = {978-1-108-24186-1 978-1-108-41675-7},
  file = {/home/xavigo/Zotero/storage/W5RLJI74/hudak_quick_2018_the_haskell_school_of_music.pdf}
}

@article{Hughes1989Why,
  title = {Why {{Functional Programming Matters}}},
  author = {Hughes, John},
  date = {1989-02-01},
  journaltitle = {The Computer Journal},
  shortjournal = {The Computer Journal},
  volume = {32},
  number = {2},
  pages = {98--107},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/32.2.98},
  abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write and to debug, and provides a collection of modules that can be reused to reduce future programming costs. In this paper we show that two features of functional languages in particular, higher-order functions and lazy evaluation, can contribute significantly to modularity. As examples, we manipulate lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artificial Intelligence used in game-playing programs). We conclude that since modularity is the key to successful programming, functional programming offers important advantages for software development.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/DJKEVUCR/Hughes - 1989 - Why Functional Programming Matters.pdf}
}

@book{Ji2015Sophus,
  title = {Sophus {{Lie}} and {{Felix Klein}}: The {{Erlangen}} Program and Its Impact in Mathematics and Physics},
  shorttitle = {Sophus {{Lie}} and {{Felix Klein}}},
  editor = {Ji, Lizhen and Papadopoulos, Athanase},
  date = {2015},
  series = {{{IRMA}} Lectures in Mathematics and Theoretical Physics},
  number = {23},
  publisher = {{European Mathematical Society}},
  location = {{Zürich}},
  isbn = {978-3-03719-148-4},
  pagetotal = {330},
  keywords = {Geometry,{Geometry, Projective},Group theory,History,{Klein, Felix},{Lie, Sophus}}
}

@article{Jones2002Tackling,
  title = {Tackling the {{Awkward Squad}}: Monadic Input/Output, Concurrency, Exceptions, and Foreign-Language Calls in {{Haskell}}},
  author = {Jones, Simon PEYTON},
  date = {2002-07-25},
  abstract = {Functional programming may be beautiful, but to write real applications we must grapple with awkward real-world issues: input/output, robustness, concurrency, and interfacing to programs written in other languages.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/TQJJXX7V/Jones - Tackling the Awkward Squad monadic inputoutput, .pdf}
}

@article{Klein1983comparative,
  title = {A Comparative Review of Recent Researches in Geometry},
  author = {Klein, Felix},
  date = {1983-07},
  journaltitle = {Bulletin of the New York Mathematical Society},
  volume = {2},
  number = {10},
  pages = {215--249},
  publisher = {{American Mathematical Society}},
  issn = {2638-938X, 2638-9398},
  url = {https://projecteuclid.org/journals/bulletin-of-the-new-york-mathematical-society/volume-2/issue-10/A-comparative-review-of-recent-researches-in-geometry/bams/1183407629.full},
  urldate = {2023-07-12},
  abstract = {Bulletin (New Series) of the American Mathematical Society},
  file = {/home/xavigo/Zotero/storage/E463Y5QV/klein_1900_a_comparative_review_of_recent_researches_in_geometry.pdf}
}

@thesis{McLean2011ArtistProgrammers,
  type = {phdthesis},
  title = {Artist-{{Programmers}} and {{Programming Languages}} for the {{Arts}}},
  author = {McLean, Alex},
  date = {2011-10},
  institution = {{University of London}},
  langid = {english},
  pagetotal = {172},
  file = {/home/xavigo/Zotero/storage/ABI5EKIY/McLean - Artist-Programmers and Programming Languages for t.pdf}
}

@online{McLean2018Weaving,
  type = {Billet},
  title = {Weaving {{TidalCycles}} Patterns at a {{TC-1}} Loom},
  author = {McLean, Alex},
  date = {2018-06-02},
  url = {https://penelope.hypotheses.org/630},
  urldate = {2024-02-17},
  abstract = {During our recent project residency at Textiles Zentrum Haslach, we had the opportunity to work at the TC-1 looms there. As an experiment I used my TidalCycles software, which is normally used to create music, to...},
  langid = {american},
  organization = {{PENELOPE}},
  file = {/home/xavigo/Zotero/storage/B3LW556C/630.html}
}

@inproceedings{McLean2020Algorithmic,
  title = {Algorithmic {{Pattern}}},
  booktitle = {Proceedings of the {{International Conference}} on {{New Interfaces}} for {{Musical Expression}}},
  author = {McLean, Alex},
  date = {2020-07},
  pages = {6},
  url = {https://www.nime.org/proceedings/2020/nime2020_paper50.pdf},
  abstract = {This paper brings together two main perspectives on algorithmic pattern. First, the writing of musical patterns in live coding performance, and second, the weaving of patterns in textiles. In both cases, algorithmic pattern is an interface between the human and the outcome, where small changes have far-reaching impact on the results.},
  eventtitle = {{{NIME}}},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/YGMAJNTK/Proceedings of the International Conference on New.pdf}
}

@video{McLean2021TidalCycles,
  entrysubtype = {video},
  title = {{{TidalCycles}} - the Remake},
  editor = {McLean, Alex},
  editortype = {director},
  date = {2021-07-21},
  url = {https://www.youtube.com/watch?v=F2-evGtBnqQ},
  urldate = {2024-02-17},
  abstract = {I thought it'd be interesting to see  1. How much of Tidal I could remake inside two hours 2. How it would differ from the Tidal we have I'm not sure if I will do any cut-and-pasting from the existing Tidal codebase, it might be fun to see how much I can make 100\% from scratch but lets see! All code shown is shared under the GNU Public License version 3. It'd be extra interesting if anyone else wants to try this with their language. You can join in the discussion here: https://forum.toplap.org/t/live-codin... Note that time is a bit unpredictable atm so I might have to change/postpone the schedule at short notice..}
}

@online{McLean2023Weaving,
  title = {Weaving {{TidalCycles}} Patterns at a {{TC-1}} Loom – {{PENELOPE}}},
  author = {McLean, Alex},
  date = {2023-06-07},
  url = {https://web.archive.org/web/20230607033639/https://penelope.hypotheses.org/630},
  urldate = {2024-02-17},
  file = {/home/xavigo/Zotero/storage/IGKD8IF6/630.html}
}

@incollection{Milne2015Perfect,
  title = {Perfect Balance: {{A}} Novel Principle for the Construction of Musical Scales and Meters},
  shorttitle = {Perfect Balance},
  booktitle = {Mathematics and Computation in Music: 5th International Conference, {{MCM}} 2015; Proceedings},
  author = {Milne, Andrew and Bulger, David and Herff, Steffen and Sethares, William},
  date = {2015-06-01},
  series = {Lecture Notes in Computer Science},
  number = {9110},
  pages = {97--108},
  location = {{London, UK}},
  doi = {10.1007/978-3-319-20603-5},
  abstract = {We identify a class of periodic patterns in musical scales or meters that are perfectly balanced. Such patterns have elements that are distributed around the periodic circle such that their 'centre of gravity' is precisely at the circle's centre. Perfect balance is implied by the well established concept of perfect evenness (e.g., equal step scales or isochronous meters). However, we identify a less trivial class of perfectly balanced patterns that have no repetitions within the period. Such patterns can be distinctly uneven. We explore some heuristics for generating and parameterizing these patterns. We also introduce a theorem that any perfectly balanced pattern in a discrete universe can be expressed as a combination of regular polygons. We hope this framework may be useful for understanding our perception and production of aesthetically interesting and novel (microtonal) scales and meters, and help to dis-ambiguate between balance and evenness; two properties that are easily confused.},
  isbn = {978-3-319-20602-8},
  file = {/home/xavigo/Zotero/storage/QMI2JU3C/Milne et al. - 2015 - Perfect balance A novel principle for the constru.pdf}
}

@article{Milne2016XronoMorph,
  title = {{{XronoMorph}}: {{Algorithmic Generation}} of {{Perfectly Balanced}} and {{Well-Formed Rhythms}}},
  author = {Milne, Andrew J and Herff, Steffen A and Bulger, David and Sethares, William A and Dean, Roger T},
  date = {2016-07},
  journaltitle = {Proceedings of the International Conference on New Interfaces for Musical Expression},
  pages = {6},
  doi = {10.5281/zenodo.1176082},
  abstract = {We present an application—XronoMorph—for the algorithmic generation of rhythms in the context of creative composition and performance, and of musical analysis and education. XronoMorph makes use of visual and geometrical conceptualizations of rhythms, and allows the user to smoothly morph between rhythms. Sonification of the user generated geometrical constructs is possible using a built-in sampler, VST and AU plugins, or standalone synthesizers via MIDI. The algorithms are based on two underlying mathematical principles: perfect balance and well-formedness, both of which can be derived from coefficients of the discrete Fourier transform of the rhythm. The mathematical background, musical implications, and their implementation in the software are discussed.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/SHZH5IEC/Milne et al. - XronoMorph Algorithmic Generation of Perfectly Ba.pdf}
}

@article{Milne2017Exploring,
  title = {Exploring the Space of Perfectly Balanced Rhythms and Scales},
  author = {Milne, Andrew J. and Bulger, David and Herff, Steffen A.},
  date = {2017-09-02},
  journaltitle = {Journal of Mathematics and Music},
  shortjournal = {Journal of Mathematics and Music},
  volume = {11},
  number = {2-3},
  pages = {101--133},
  issn = {1745-9737, 1745-9745},
  doi = {10.1080/17459737.2017.1395915},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/LA28WYPG/Milne et al. - 2017 - Exploring the space of perfectly balanced rhythms .pdf}
}

@book{OlivaresSoria2022Principios,
  title = {Principios de Creación Sonora Procedural},
  author = {Olivares Soria, Edmar},
  date = {2022},
  edition = {1},
  publisher = {{Centro Mexicano para la Música y las Artes Sonoras}},
  location = {{Morelia, Michoacan}},
  url = {https://www.cmmas.org/es/posts/Libro-Principios-de-creacion-sonora-procedural-},
  isbn = {978-607-99502-1-7},
  file = {/home/xavigo/Zotero/storage/V88WVGGA/Olivares Soria - 2022 - Principios de creación sonora procedural.pdf}
}

@video{PeytonJones2017Escape,
  entrysubtype = {video},
  title = {Escape from the Ivory Tower: The {{Haskell}} Journey},
  shorttitle = {The {{Haskell Journey}}},
  editor = {Peyton Jones, Simon},
  editortype = {director},
  editora = {{Churchill College, University of Cambridge}},
  editoratype = {collaborator},
  date = {2017},
  publisher = {{Churchill College, University of Cambridge}},
  url = {https://www.youtube.com/watch?v=re96UgMk6GQ},
  urldate = {2023-06-28},
  abstract = {In this talk Simon discusses Haskell’s birth and evolution, including some of the research and engineering challenges he faced in design and implementation.  Focusing particularly on the ideas that have turned out, in retrospect, to be most important and influential, as well as sketching some current developments and making some wild guesses about the future.}
}

@inproceedings{Spiegel1981Manipulations,
  title = {Manipulations of {{Musical Patterns}}},
  booktitle = {Proceedings of the {{Symposium}} on {{Small Computers}} and the {{Arts}}},
  author = {Spiegel, Laurie},
  date = {1981},
  pages = {19--22},
  url = {http://lauriespiegel.net/ls/writings/musical_manip.html},
  keywords = {morphology,pattern},
  file = {/home/xavigo/Zotero/storage/FXXPBA3W/musical_manip.html}
}

@article{Toussaint2005Euclidean,
  title = {The {{Euclidean Algorithm Generates Traditional Musical Rhythms}}},
  author = {Toussaint, Godfried},
  date = {2005},
  journaltitle = {Proceedings of BRIDGES: Mathematical Connections in Art, Music and Science},
  pages = {47--56},
  abstract = {The Euclidean algorithm (which comes down to us from Euclid’s Elements) computes the greatest common divisor of two given integers. It is shown here that the structure of the Euclidean algorithm may be used to generate, very efficiently, a large family of rhythms used as timelines (ostinatos), in sub-Saharan African music in particular, and world music in general. These rhythms, here dubbed Euclidean rhythms, have the property that their onset patterns are distributed as evenly as possible. Euclidean rhythms also find application in nuclear physics accelerators and in computer science, and are closely related to several families of words and sequences of interest in the study of the combinatorics of words, such as Euclidean strings, to which the Euclidean rhythms are compared.},
  langid = {english},
  file = {/home/xavigo/Zotero/storage/AAJJ3G3T/Toussaint - 2005 - The Euclidean Algorithm Generates Traditional Musi.pdf}
}

@book{Toussaint2020Geometry,
  title = {The {{Geometry}} of {{Musical Rhythm}}: {{What Makes}} a "{{Good}}" {{Rhythm Good}}?},
  shorttitle = {The Geometry of Musical Rhythm},
  author = {Toussaint, Godfried T},
  date = {2020},
  edition = {Second edition},
  publisher = {{CRC Press}},
  location = {{Boca Raton London New York}},
  abstract = {The original edition of The Geometry of Musical Rhythm was the first book to provide a systematic and accessible computational geometric analysis of the musical rhythms of the world. It explained how the study of the mathematical properties of musical rhythm generates common mathematical problems that arise in a variety of seemingly disparate fields. The book also introduced the distance approach to phylogenetic analysis and illustrated its application to the study of musical rhythm. The new edition retains all of this, while also adding 100 pages, 93 figures, 225 new references, and six new chapters covering topics such as meter and metric complexity, rhythmic grouping, expressive timbre and timing in rhythmic performance, and evolution phylogenetic analysis of ancient Greek paeonic rhythms. In addition, further context is provided to give the reader a fuller and richer insight into the historical connections between music and mathematics.},
  isbn = {978-0-8153-7097-0 978-0-8153-5038-5},
  langid = {english},
  pagetotal = {351},
  annotation = {OCLC: 1139843477},
  file = {/home/xavigo/Zotero/storage/MZZDIRLE/Toussaint - 2020 - The geometry of musical rhythm what makes a good.pdf}
}

@thesis{VillasenorRamirez2017Live,
  title = {Live coding en red: Una práctica de networking en el caso de LiveCodeNet Ensamble},
  author = {Villaseñor Ramírez, Hernani},
  date = {2017-11},
  institution = {{Universidad Nacional Autónoma de México}},
  location = {{CDMX, México}},
  langid = {spanish},
  file = {/home/xavigo/Zotero/storage/BVTXJD3L/Villaseñor Ramírez - Live coding en red Una práctica de networking en .pdf}
}

@inproceedings{Wadler1989How,
  title = {How to Make Ad-Hoc Polymorphism Less Ad Hoc},
  booktitle = {Proceedings of the 16th {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages},
  author = {Wadler, P. and Blott, S.},
  date = {1989-01-03},
  series = {{{POPL}} '89},
  pages = {60--76},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/75277.75283},
  abstract = {This paper presents type classes, a new approach to ad-hoc polymorphism. Type classes permit overloading of arithmetic operators such as multiplication, and generalise the “eqtype variables” of Standard ML. Type classes extend the Hindley/Milner polymorphic type system, and provide a new approach to issues that arise in object-oriented programming, bounded type quantification, and abstract data types. This paper provides an informal introduction to type classes, and defines them formally by means of type inference rules.},
  isbn = {978-0-89791-294-5},
  file = {/home/xavigo/Zotero/storage/WML3TANJ/wadler_blott_1989_how_to_make_ad-hoc_polymorphism_less_ad_hoc.pdf}
}

@incollection{Wiggins2017marco,
  title = {Un marco teórico para la descripción, el análisis y la comparación de sistemas creativos},
  booktitle = {Creatividad computacional},
  author = {Wiggins, Geraint A.},
  editor = {Pérez y Pérez, Rafael},
  date = {2017},
  edition = {2ª reimp},
  publisher = {{Grupo Editorial Patria Universidad Autónoma Metropolitana-Unidad Cuajimalpa}},
  location = {{México, D.F}},
  isbn = {978-607-744-284-4},
  langid = {spanish},
  annotation = {OCLC: 1065536924}
}

@book{Yaglom1988Felix,
  title = {Felix {{Klein}} and {{Sophus Lie}}: {{Evolution}} of the Idea of Symmetry in the {{Nineteenth Century}}},
  shorttitle = {Felix {{Klein}} and {{Sophus Lie}}},
  author = {Yaglom, I. M.},
  editor = {Grant, Hardy and Shenitzer, Abe},
  translator = {Sossinsky, Sergei},
  date = {1988},
  publisher = {{Birkhäuser}},
  location = {{Boston}},
  isbn = {978-0-8176-3316-5},
  langid = {english},
  pagetotal = {237},
  keywords = {Biography,Geometry,History,{Klein, Felix},{Lie, Sophus},Mathematicians,Symmetry}
}
