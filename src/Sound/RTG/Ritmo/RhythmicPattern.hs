module Sound.RTG.Ritmo.RhythmicPattern where
{-|
Module      : RhythmicPattern
Description : Main data type and its API helper functions
Copyright   : (c) Xavier GÃ³ngora, 2023
License     : GPL-3
Maintainer  : ixbalanque@protonmail.ch
Stability   : experimental

Rhythmic patterns are wrapped patterns with aditional structure.
-}

import           Data.Group                     (Group)
import           Sound.RTG.Ritmo.Pattern        (Pattern, Time)
import           Sound.RTG.Ritmo.PerfectBalance (indicatorVector)

-- | Onset patterns are represented by boolean valued lists
-- to match with effortlesly with usual pattern representations.
-- For example, in box notation, empty boxes equal False.
type OnsetPattern = Pattern Bool

-- | Groupings of pattern onsets generated by the
-- mutual nearest-neighbor graph.
type Groupings a = [Pattern a]

type OnsetGroups = Groupings Bool

-- | Meter carries musical context information
-- related to a patterns underlying pulse.
type Meter = Int

-- | This data type encondes a rhythmic pattern along with
-- other structure related to rhythm perception
data Rhythmic = Rhythm {
                        pttrn  :: OnsetPattern,
                        groups :: OnsetGroups,
                        meter  :: !Meter
                       }

instance Show Rhythmic where
  show rhythm = show (pttrn rhythm)

toRhythm :: Pattern Time -> Rhythmic
toRhythm xs = Rhythm {
                      pttrn = toOnset (indicatorVector xs),
                      groups = [],
                      meter = length xs
                     }

mutualNNG :: Pattern Bool -> Groupings Bool
mutualNNG xs = []

toOnset :: Pattern Int -> OnsetPattern
toOnset = map (/= 0)
