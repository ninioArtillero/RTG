{-# LANGUAGE InstanceSigs #-}
module Sound.RTG.Ritmo.RhythmicPattern where
{-|
Module      : RhythmicPattern
Description : Main data type and its API helper functions
Copyright   : (c) Xavier GÃ³ngora, 2024
License     : GPL-3
Maintainer  : ixbalanque@protonmail.ch
Stability   : experimental

Rhythmic patterns are wrapped patterns with aditional structure.
-}

import           Data.Group                     (Group, invert)
import           Data.List                      (group, sort)
import qualified Sound.RTG.Ritmo.Pattern        as P
import           Sound.RTG.Ritmo.PerfectBalance (indicatorVector)

-- | This data type represents integers modulo 2
data Binary = Zero | One deriving (Eq, Ord, Enum, Bounded)

instance Show Binary where
  show :: Binary -> String
  show Zero = show 0
  show One  = show 1

instance Semigroup Binary where
  (<>) :: Binary -> Binary -> Binary
  Zero <> One  = One
  One  <> Zero = One
  _    <> _    = Zero

-- TODO: change to onset notation (x . . x . .)
instance Monoid Binary where
  mempty :: Binary
  mempty = Zero

instance Group Binary where
  invert :: Binary -> Binary
  invert  = id

-- | Onset patterns are represented by binary valued lists
-- so that group structure can de lifted.
type OnsetPattern = P.Pattern Binary

-- | Clusters are groupings of pattern onsets generated by the
-- mutual nearest-neighbor graph (MNNG).
type OnsetClusters = [OnsetPattern]

-- | Meter carries musical context information
-- related to a patterns underlying pulse.
type Meter = Int

newtype Sign = Sign { sign :: Int } deriving (Show,Eq)

-- | This data type encondes a rhythmic pattern along with
-- other structure related to rhythm perception.
data Rhythmic = Rhythm {
                        pttrn       :: OnsetPattern,
                        clusters    :: OnsetClusters,
                        meter       :: !Meter,
                        orientation :: !Sign
                       } deriving (Eq,Show)

-- TODO: Create functor instance of rhythmic to lift list transformations

instance Semigroup Rhythmic where
  (<>) :: Rhythmic -> Rhythmic -> Rhythmic
  (Rhythm pttrn1 clusters1 meter1 s1) <> (Rhythm pttrn2 clusters2 meter2 s2) =
    let sign1 = sign s1
        sign2 = sign s2
        direction | sign1 == 0 = sign2
                  | sign2 == 0 = sign1
                  | otherwise = sign1 * sign2
        -- mtr = if orientation == 1 then meter1 + meter2 else max meter1 meter2
        signedMeter = sign1 * meter1 + sign2 * meter2
        meterDiff = abs (meter1 - meter2)
        p = case direction of
          0  -> []
          1  -> pttrn1 ++ pttrn2
          -1 ->
            -- Alternativa haciendo zip sobre el final de la lista
            -- case (sign1 > 0, compare meter1 meter2) of
            --   (True, GT) -> drop meterDiff $ zipWith (<>) pttrn1 ( replicate meterDiff Zero ++ pttrn2)
            --   (False, GT) -> drop meterDiff $ zipWith (<>) pttrn1 ( replicate meterDiff Zero ++ pttrn2)
            --   (True, LT) -> drop meterDiff $ zipWith (<>) (replicate meterDiff Zero ++ pttrn1) pttrn2
            --   (False, LT) -> drop meterDiff $ zipWith (<>) (replicate meterDiff Zero ++ pttrn1) pttrn2,
            reduceEmpty $ zipWith (<>) pttrn1 pttrn2 ++ P.diff pttrn1 pttrn2
    in Rhythm {
      pttrn = p,
      clusters = mutualNNG p,
      meter = abs signedMeter,
      orientation = Sign $ signum signedMeter
      }

instance Monoid Rhythmic where
  mempty :: Rhythmic
  mempty = toRhythm []

instance Group Rhythmic where
  invert :: Rhythmic -> Rhythmic
  invert = inv

inv :: Rhythmic -> Rhythmic
inv (Rhythm pttrn clusters meter (Sign n)) = Rhythm pttrn clusters meter (Sign (-n))

inv' :: Rhythmic -> Rhythmic
inv' (Rhythm pttrn clusters meter sign) = Rhythm (reverse pttrn) clusters meter sign

inv'' :: Rhythmic -> Rhythmic
inv'' (Rhythm pttrn clusters meter (Sign n)) = Rhythm (reverse pttrn) clusters meter (Sign (-n))

toOnset :: Integral a => P.Pattern a -> OnsetPattern
toOnset = map (\n -> if (== 0) . (`mod` 2) $ n then Zero else One)

toInts :: OnsetPattern -> P.Pattern Int
toInts = let toInt x = case x of Zero -> 0; One -> 1
         in map toInt

toRhythm :: P.Pattern P.Time -> Rhythmic
toRhythm xs
  | null xs = Rhythm {
               pttrn = [],
               clusters = [],
               meter = 0,
               orientation = Sign 0
              }
  | reverse xs == sort xs = Rhythm {
      -- Negative rhythms are represented by decreasing patterns
               pttrn = p,
               clusters = mutualNNG p,
               meter = length p,
               orientation = Sign (-1)
              }
  | otherwise = Rhythm {
               pttrn = p,
               clusters = mutualNNG p,
               meter = length p,
               orientation = Sign 1
              }
  where p = toOnset (indicatorVector xs)

makeRhythm :: Int -> P.Pattern Int -> Rhythmic
makeRhythm n ns = Rhythm {
  pttrn = p,
  clusters = mutualNNG p,
  meter = length p,
  orientation = s
  }
  where
    p = toOnset ns
    s= Sign (signum n)

-- TODO: Using biggerNeighbors + parseNeighbors to select which IOIs to join.
-- in the corresponding cluster.
mutualNNG :: OnsetPattern -> OnsetClusters
mutualNNG xs = map clusterBuilder neighborhoods
  where neighborhoods = parseNeighborhoods $ iois xs
        clusterBuilder neighborhood =
          case neighborhood  of
            [] -> []
            (n, (b1,b2)):nbs -> case (b1,b2) of
              (True,True)   -> ((One : replicate (n-1) Zero) ++ [One]) ++ clusterBuilder nbs
              (True,False)  -> (One : replicate (n-1) Zero) ++ clusterBuilder nbs
              (False,False) -> replicate (n-1) Zero ++ clusterBuilder nbs
              (False,True)  -> ((One:replicate (n-1) Zero) ++ [One]) ++ clusterBuilder nbs

-- mutualNNG (pttrn rumba) = [[1,0,0,1], [0,0,0], [1,0,0], [1,0,1], [0,0,0]]

parseNeighborhoods :: [Int] -> [[(Int,(Bool,Bool))]]
-- | Applicative style is used on the input, which means that
-- the rhythmic pattern is evaluated on both functions surrounding @<*>@ before zipping)
parseNeighborhoods bs = map reverse $ parseNeighborhoodsIter (zip <$> id <*> biggerNeighbor $ bs) []

-- | Helper function with an extra parameter to join the intervals of nearest neighbors
parseNeighborhoodsIter :: [(Int, (Bool,Bool))] -> [(Int, (Bool,Bool))] -> [[(Int, (Bool,Bool))]]
parseNeighborhoodsIter [] [] = []
parseNeighborhoodsIter [] xs = [xs]
parseNeighborhoodsIter (m@(int,ns):bs) xs = case ns of
  -- | A local minimum is its own cluster. Avoid passing empty list.
  (True,True) -> if null xs
    then [m] : parseNeighborhoodsIter bs []
    else xs : [m] : parseNeighborhoodsIter bs []
  -- | Start a new cluster without passing empty lists
  (True,False) -> if null xs
    then parseNeighborhoodsIter bs [m]
    else xs : parseNeighborhoodsIter bs [m]
  -- | Add interval to cluster
  (False,False) -> parseNeighborhoodsIter bs (m:xs)
  -- | Close a cluster
  (False,True) -> (m:xs) : parseNeighborhoodsIter bs []

-- | Compare an element's left and right neighbors. True means its bigger.
biggerNeighbor :: [Int] -> [(Bool,Bool)]
biggerNeighbor xs = let leftNeighbors = zipWith (>) (P.rotateRight 1 xs) xs
                        rightNeighbors = zipWith (>) (P.rotateLeft 1 xs) xs
                    in zip leftNeighbors rightNeighbors

-- | Compute the Inter-Onset-Intervals of an onset pattern
iois :: OnsetPattern -> [Int]
iois xs =
  let intervals = group . drop 1 . scanl pickOnsets [] $ startPosition xs
      pickOnsets acc x = if x == One then x:acc else acc
  in map length intervals

ioisToOnset :: [Int] -> OnsetPattern
ioisToOnset = foldr (\x acc -> if x>0 then (One:replicate (x-1) Zero) ++ acc else error "There was a non-positive IOI") []

startPosition :: OnsetPattern -> OnsetPattern
startPosition [] = []
startPosition pttrn@(x:xs)
  | null (reduceEmpty pttrn) = []
  | x == Zero = startPosition $ P.rotateLeft 1 pttrn
  | otherwise = pttrn

-- | Steps away from the first onset
position :: OnsetPattern -> Int
position xs
  | null (reduceEmpty xs) = 0
  | take 1 xs == [One] = 0
  | otherwise = position (drop 1 xs) + 1


reduceEmpty :: OnsetPattern -> OnsetPattern
reduceEmpty []           = []
reduceEmpty pttrn@(x:xs) = if x == Zero then reduceEmpty xs else pttrn

-- | Toussaint's six distinguished rhythms
clave = toRhythm P.clave
rumba = toRhythm P.rumba
gahu = toRhythm P.gahu
shiko = toRhythm P.shiko
bossa = toRhythm P.bossa
soukous = toRhythm P.soukous

-- TODO: Create module with rhythmic pattern combinators:
-- sequence, parallel, complement, reverse...
