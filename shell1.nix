{ pkgs ? import <nixpkgs> { } }:
# TODO: use same logic from shell0 for pinnig
# (fetchTarball {
#  url = "https://github.com/NixOS/nixpkgs/archive/b0b2c5445c64.tar.gz";
#  sha256 = "1kvscvl8in723440i0w0sv2j2pawdxjkbiqgx85jda2cz92l6rpm";
#})

with pkgs;

# TODO: fix dependency issue (apparently on ghc)
# why it works for shell0 and not here?

let
  # Import the project dependencies generated by
  # $ cabal2nix ./. > project.nix
  project = haskellPackages.callPackage ./project.nix { };
  # TODO: test alternatives
  # Alternative 0 (failed)
  #project = import ./project.nix { inherit pkgs; };
  # Alternative 1: inheriting packages
  #project = pkgs.haskellPackages.callPackage ./project.nix { inherit pkgs };
  # Alternative 1: calling release.nix
  #project = (import ./release.nix).project.env;

  # Path to SuperCollider startup script
  scSetup = ./superdirt_startup.scd;

in mkShellNoCC {
  # List of packages to be available in the shell
  buildInputs = [
    pkgs.git # for SuperCollider Quarks
    #pkgs.haskellPackages.ghc
    #pkgs.haskellPackages.cabal-install
    project
    pkgs.supercollider-with-plugins
  ];

  # Intructions to set up the shell
  shellHook = ''
    # Start SuperCollider in the background and redirect output
    echo -e "Installing, configuring and starting SuperDirt.\nThis might take a while depending on your internet connection..."
    sclang $scSetup > /dev/null 2>&1 &

    # Ensure that SuperCollider is stopped when exiting the shell
    sclang_pid=$!
    trap "kill $sclang_pid" EXIT

    # Wait for SuperCollider to initialize
    sleep 5  # Adjust this based on initialization time

    # Launch the cabal REPL
    echo "Setting up RTG.."
    cabal repl
  '';
}
