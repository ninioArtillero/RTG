-- Funciones para manipular muestras de audio largas.

setcps (135/60/4)

-- Reproducir una sola vez
once $ s "break:8"

-- Determinar la parte del sample a reproducir
d1 $ s "break:8" # begin 0 # end 0.25

d2 $ s "hh*4" -- reproducir para marcar el tiempo

-- Cambiar la unidad, para que speed permita al loop ocupar todo el ciclo
d1 $ s "break:8" # speed 1 # unit "c"

-- Para que el pedazo reproducido ocupe un cuarto del ciclo
d1 $ s "break:8" # speed 1 # unit "c" # begin 0 # end 0.25

-- CUT / LEGATO -----------------------------------------------------------------

d1 $ s "sax(3,8)" # legato 1 -- el sample ocupa su step

d1 $ s "sax(3,8)" # cut 1 -- el sample suena hasta que es interrumpido

-- SLICE / SPLICE ---------------------------------------------------------------

-- Estas funciones permiten cortar un sample largo para acomodarlo en el ciclo

d1 $ s "break:4"

-- splice divide el sample en dicho número de partes y permite tocar cada parte
d1 $ splice 4 "0 1 2 3" $ s "break:4"

d1 $ splice 8 "0 1 2 3 4 5 6 7" $ s "break:4" -- mismo resultado que el anterior

d1 $ splice 8 "0 1 1 3 4 4 6 7 7" $ s "break:4" -- otro orden, con más eventos

-- splice cambia de pitch de acuerdo al cps
setcps 0.3

setcps 0.7

setcps 0.5

d1 $ splice 8 (slow "2 1" "3!3 [2 1 5] 7 6*2") $ s "break:4"

-- Por otro lado slice no cambia el pitch, pero puede haber cortes debido a que
-- no se modifica la longitud del sample

d1 $ slice 8 (slow "2 1" "3!3 [2 1 5] 7 6*2") $ s "break:4"

d1 $ slice 8 "0 1 2 3 4 5" $ s "break:4"

hush

-- CHOP / STRIATE / loopAt ------------------------------------------------------

-- loopAt reproduce el samble en la duración dada en ciclos
-- El evento de trigger queda fijado al pricipio del periodo establecido
-- por lo que puede no sonar inmediatamente.
d1 $ loopAt 1 $ s "break:8"

setcps 0.7

setcps 0.5

d1 $ loopAt 1.5 $ s "break:8"

d2 $ slow 2 $ s "arp"

hush

:t loopAt

-- chop divide el sample en determinado número de pedazos

d1 $ s "break:8"

d1 $ chop 4 $ s "break:8"

d1 $ loopAt 1 $ chop 4 $ s "break:8"

-- al tener dos samples, se producen 8 pedazos que se tocan secuencialmente
d1 $ loopAt 2 $ chop 4 $ s "break:8 break:9"

--- podemos alentar el patrón para evitar que los pedazos se superpongan

d1 $ slow 2 $ loopAt 2 $ chop 4 $ s "break:8 break:9"


-- striate divide en el número de pedazos indicado, y al reproducir los alterna

d1 $ slow 2 $ loopAt 2 $ striate 4 $ s "break:8 break:9"

-- Para usar una función continua para modificar una función que toma
-- valores enteros se puede redondear
d1 $ slow 2 $ loopAt 2
  $ striate (slow 4 $ round <$> range 2 32 sine) $ sound "break:8 break:9"
